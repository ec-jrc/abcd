digraph D {
    node [fontname = "Linux Biolinum"];
    edge [fontname = "Linux Biolinum"];

    start [label = "Start", peripheries = 2];
    create_context [label = "Create ZeroMQ\ncontext"];
    create_sockets [label = "Create\nsockets"];
    bind_sockets [label = "Bind\nsockets"];
    create_control_unit [label = "Create\ncontrol\nunit"];
    read_config [label = "Read\nconfiguration"];
    create_digitizer [label = "Create\ndigitizers"];
    configure_digitizer [label = "Configure\ndigitizers"];
    allocate_memory [label = "Allocate\nmemory"];
    reconfigure_create_digitizer [label = "Reconfigure\ncreate digitizers"];
    reconfigure_clear_memory [label = "Reconfigure\nclear memory"];
    reconfigure_destroy_digitizer [label = "Reconfigure\ndestroy digitizers"];

    receive_commands [label = "Receive\ncommands"];
    publish_status [label = "Publish\nstatus"];
    start_acquisition [label = "Start\nacquisition"];
    stop_acquisition [label = "Stop\nacquisition"];

    acquisition_receive_commands [label = "Acquisition\nreceive\ncommands"];
    read_data [label = "Read\ndata"];
    publish_events [label = "Publish\nevents"];
    acquisition_publish_status [label = "Acquisition\npublish\nstatus"];
    stop_publish_events [label = "Stop\npublish\nevents"];

    restart_publish_events [label = "Restart\npublish events"];
    restart_stop_acquisition [label = "Restart\nstop acquisition"];
    restart_clear_memory [label = "Restart\nclear memory"];
    restart_destroy_digitizer [label = "Restart\ndestroy digitizers"];
    restart_destroy_control_unit [label = "Restart destroy\ncontrol unit"];
    restart_create_control_unit [label = "Restart create\ncontrol unit"];
    restart_create_digitizer [label = "Restart\ncreate digitizers"];
    restart_configure_digitizer [label = "Restart\nconfigure digitizers"];
    restart_allocate_memory [label = "Restart\nallocate memory"];

    clear_memory [label = "Clear\nmemory"];
    destroy_digitizer [label = "Destroy\ndigitizers"];
    destroy_control_unit [label = "Destroy\ncontrol\nunit"];
    close_sockets [label = "Close\nsockets"];
    destroy_context [label = "Destroy\ncontext"];
    stop [label = "Stop", peripheries = 2];

    communication_error [label = "Communication\nerror", color = "red"];
    parse_error [label = "Parse\nerror", color = "red"];
    digitizer_error [label = "Digitizer\nerror", color = "red"];
    configure_error [label = "Configuration\nerror", color = "red"];
    acquisition_error [label = "Acquisition\nerror", color = "red"];
    restart_configure_error [label = "Restart\nconfiguration error", color = "red"];
    restart_digitizer_error [label = "Restart\ndigitizer error", color = "red"];
    restarts_error [label = "Restarts\nerror", color = "red"];
    resets_error [label = "Resets\nerror", color = "red"];

    {rank = "source"; start}
    {rank = "same"; bind_sockets communication_error}
    {rank = "same"; configure_digitizer configure_error}
    {rank = "same"; allocate_memory digitizer_error reconfigure_clear_memory reconfigure_destroy_digitizer reconfigure_create_digitizer}
    {rank = "same"; publish_status}
    {rank = "same"; receive_commands clear_memory destroy_digitizer destroy_control_unit close_sockets}
    {rank = "same"; start_acquisition stop_acquisition stop_publish_events}
    {rank = "same"; read_data publish_events acquisition_publish_status}

    start -> create_context;
    create_context -> create_sockets [label = "ZeroMQ\nOK"];
    create_sockets -> bind_sockets [label = "ZeroMQ\nOK"];
    bind_sockets -> create_control_unit [label = "ZeroMQ\nOK"];
    create_control_unit -> create_digitizer;
    create_digitizer -> destroy_digitizer [label = "Identification\nonly", color = "blue", fontcolor = "blue"];
    create_digitizer -> read_config;
    read_config -> configure_digitizer;
    configure_digitizer -> allocate_memory;
    allocate_memory -> publish_status;
    reconfigure_clear_memory -> reconfigure_destroy_digitizer;
    reconfigure_destroy_digitizer -> reconfigure_create_digitizer;
    reconfigure_create_digitizer -> configure_digitizer;
    publish_status -> receive_commands [tailport = "sw", headport = "nw"];
    receive_commands -> receive_commands [tailport = "e", headport = "se"];
    receive_commands -> publish_status [label = "Timeout", tailport = "ne", headport = "se"];
    receive_commands -> start_acquisition [label = "Start", color = "blue", fontcolor = "blue"];
    receive_commands -> configure_digitizer [label = "Reconfigure", color = "blue", fontcolor = "blue"];
    receive_commands -> clear_memory [label = "Quit", color = "blue", fontcolor = "blue"];
    start_acquisition -> acquisition_receive_commands;
    acquisition_receive_commands -> read_data;
    acquisition_receive_commands -> stop_publish_events [label = "Stop", color = "blue", weight=8, fontcolor = "blue"];
    acquisition_receive_commands -> acquisition_error [label = "Simulate\nerror", color = "blue", weight=8, fontcolor = "blue"];
    //acquisition_receive_commands -> read_data [tailport = "se", headport = "ne"];
    //acquisition_receive_commands -> poll_digitizer [tailport = "se", headport = "ne"];
    //poll_digitizer -> read_data [label = "Event(s)\navailable"];
    read_data -> publish_events [label = "Buffer full\nor timeout", tailport = "s", headport = "s"];
    read_data -> read_data [tailport = "w", headport = "nw"];
    read_data -> acquisition_error [label = "Error", color = "red"];
    publish_events -> read_data;
    publish_events -> acquisition_publish_status [label = "Timeout"];
    acquisition_publish_status -> acquisition_receive_commands;
    //poll_digitizer -> acquisition_publish_status [label = "No events\navailable"];
    stop_publish_events -> stop_acquisition [weight=8];
    stop_acquisition -> receive_commands;

    clear_memory -> destroy_digitizer;

    create_context -> communication_error [label = "Error", color = "red"];
    create_sockets -> communication_error [label = "Error", color = "red"];
    bind_sockets -> communication_error [label = "Error", color = "red"];
    communication_error -> close_sockets [headport = "ne"];
    create_control_unit -> close_sockets [label = "Error", color = "red"];
    restart_create_control_unit -> close_sockets [label = "Error", color = "red"];

    create_digitizer -> configure_error [label = "Error", color = "red"];
    reconfigure_create_digitizer -> configure_error [label = "Error", color = "red"];
    read_config -> parse_error [label = "Error", color = "red"];
    parse_error -> destroy_digitizer;
    configure_digitizer -> configure_error [label = "Error", color = "red"];
    allocate_memory -> digitizer_error [label = "Error", color = "red"];
    configure_error -> reconfigure_destroy_digitizer;
    digitizer_error -> reconfigure_clear_memory;

    acquisition_error -> restart_publish_events;
    restart_publish_events -> restart_stop_acquisition;
    restart_stop_acquisition -> start_acquisition;
    restart_stop_acquisition -> restarts_error [label = "Too many\nrestarts", color = "red"];
    restarts_error -> restart_clear_memory;
    restart_clear_memory -> restart_destroy_digitizer;
    restart_destroy_digitizer -> restart_create_digitizer;
    restart_destroy_digitizer -> resets_error [label = "Too many\nresets", color = "red"];
    resets_error -> restart_destroy_control_unit;
    restart_destroy_control_unit -> restart_create_control_unit;
    restart_create_control_unit -> restart_create_digitizer;
    restart_create_digitizer -> restart_configure_digitizer;
    restart_configure_digitizer -> restart_allocate_memory;
    restart_allocate_memory -> start_acquisition;

    restart_create_digitizer -> restart_configure_error [label = "Error", color = "red"];
    restart_configure_digitizer -> restart_configure_error [label = "Error", color = "red"];
    restart_allocate_memory -> restart_digitizer_error [label = "Error", color = "red"];
    restart_configure_error -> restart_destroy_digitizer;
    restart_digitizer_error -> restart_clear_memory;

    destroy_digitizer -> destroy_control_unit;
    destroy_control_unit -> close_sockets;
    close_sockets -> destroy_context;
    destroy_context -> stop;
}
